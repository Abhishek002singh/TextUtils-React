{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","Textform","text","setText","useState","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","newtext","toUpperCase","showAlert","handleLoClick","toLocaleLowerCase","handleClear","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpaces","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","toLowerCase","charAt","slice","capitalize","msg","App","setmode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.a6ac6a4b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About'\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = () => {\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        props.showAlert(\"converted to uppercase!\", \"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        let newtext = text.toLocaleLowerCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\")\r\n    }\r\n\r\n    const handleClear = () => {\r\n        let newtext = '';\r\n        setText(newtext);\r\n        props.showAlert(\"Text area cleared!\",\"success\");\r\n    }\r\n    const handleCopy = () => {\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newtext = text.split(/[ ]+/);\r\n        setText(newtext.join(\" \"));\r\n        props.showAlert(\"Extra-spaces removed!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState(\"\");\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className='btn btn-primary mx-1' onClick={handleUpClick}>Convert To Uppercase</button>\r\n                <button className='btn btn-primary mx-1' onClick={handleLoClick}>Convert To Lowercase</button>\r\n                <button className='btn btn-primary mx-1' onClick={handleClear}>Clear Text</button>\r\n                <button className='btn btn-primary mx-1' onClick={handleCopy}>CopyText</button>\r\n                <button className='btn btn-primary mx-1' onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className='container my-3' style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h2>Your Text Summary</h2>\r\n                <p><i>{text.split(\" \").length} words and {text.length} character</i></p>\r\n                <p><i>Take {0.008 * text.split(\" \").length} Minutes to read</i></p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Enter something in the textbox above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Alert","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar.js';\nimport Textform from './components/Textform.js';\nimport Alert from './components/Alert.js';\n// import About from './components/About.js';\n\n// routing\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500)\n  }\n\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\")\n\n      // to change the title dynamicaly\n      //document.title='TextUtils - Dark Mode';\n\n\n      //   setInterval(()=>{\n      //     document.title='TextUtils is amaxing';\n      //   }, 2000)\n\n      //   setInterval(()=>{\n      //     document.title='Install TextUtils Now';\n      //   }, 1500)\n\n    }\n\n    else {\n      setmode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n\n      // to change the title dynamicaly\n      // document.title='TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className='container my-3'>\n          {/* <Routes> */}\n            {/* <Route exact path=\"/about\" element={<About />}/> */}\n            {/* <Route exact path=\"/\" element={<Textform showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />}/> */}\n          {/* </Routes> */}\n\n          <Textform showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}